@import (reference) '../../style/color';
@import (reference) '../../style/size';

.kf-radio-group-size(@vpad, @hpad, @size) {
  & > span {
    margin: @vpad @hpad;
    &:first-child {
      margin-left: 0;
    }
    &:last-child {
      margin-right: 0;
    }

    > input[type=radio] {
      width: @size;
      height: @size;
    }

    > i {
      font-size: @size;
    }

    > span {
      font-size: @size;
    }

    > label {
      margin-left: @size + 2px;
      font-size: @size;
    }
  }
}
.kf-radio-group-color(@color) {
  & > span {
    > input[type=radio] {
      &:checked + i {
        color: @color;
      }
      &:checked ~ span {
        color: transparent;
      }
    }

    > span {
      color: @gray;
    }
  }
}

.rdgrp {
  display: inline-block;

  > span {
    display: inline-block;
    position: relative;

    > input[type=radio] {
      position: absolute;
      display: inline-block;
      left: 0;
      top: 50%;
      transform: translateY(-50%);
      opacity: 0;
      z-index: 1;
      margin: 0;
    }

    > span,
    > i {
      position: absolute;
      left: 0;
      top: 50%;
      transform: translateY(-50%);
      transition: color .2s ease;
    }

    > i {
      color: transparent;
    }
  }
}

.define-kf-radio-group() {
  .kf-radio-group {
    .kf-radio-group-color(@dark);
    .kf-radio-group-size(@vpad-md, @hpad-md, @fs-md);
  }

  @colorLen: length(@colors);
  .color(@i: 1) when (@i <= @colorLen) {
    @c: extract(@colors, @i);
    .kf-radio-group.kf-@{c} {
      .kf-radio-group-color(@@c);
    }

    .color(@i + 1);
  }

  @sizeLen: length(@sizes);
  .size(@i: 1) when (@i <= @sizeLen) {
    @s: extract(@sizes, @i);
    @vpad: extract(@vpads, @i);
    @hpad: extract(@hpads, @i);
    @fs: extract(@fss, @i);
    .kf-radio-group.kf-@{s} {
      .kf-radio-group-size(@@vpad, @@hpad, @@fs);
    }

    .size(@i + 1);
  }

  .color();
  .size();
}

:global {
  .define-kf-radio-group();
}
