@import (reference) '../style/color/color';
@import (reference) '../style/size/size';
@import (reference) '../style/caret/caret';

.kf-menu-color(@color) {
  li {
    background-color: @color;
    & when not (@color = @light) {
      color: white;
    }

    &:not(:first-child) {
      border-top: 1px solid lighten(@color, 15%);
    }

    > div {
      .kf-tip-arrow(left, @color, 4px);
    }

  }
}

.kf-menu-size(@vpad, @hpad, @fs, @br) {
  li {
    > a {
      padding: @vpad @hpad;
      font-size: @fs;
      border-radius: @br;
    }
  }
}

.menu {
  > li {
    position: relative;
    padding: 8px;

    &:hover,
    &[kf-menu-active] {
      > a {
        background-color: white;
        color: @dark;
      }
    }

    > a {
      display: block;
      text-decoration: none;
      &[kf-menu-link] {
        cursor: pointer;
      }
    }

    &.submenu {
      position: relative;

      &:hover > div {
        visibility: visible;
        opacity: 1;
        right: -6px;
      }

      > div {
        position: absolute;
        top: 50%;
        transform: translateY(-2px);
        right: 0;
        opacity: 0;
        visibility: hidden;
        transition: all .2s linear;
      }

      &:hover > ul {
        visibility: visible;
        opacity: 1;
        transform: translateX(0);
      }

      > ul {
        z-index: 2016;
        position: absolute;
        width: 100%;
        top: 0;
        left: 100%;
        border-left: 6px solid transparent;
        transform: translateX(-6px);
        opacity: 0;
        visibility: hidden;
        transition: all .2s linear;
      }
    }
  }
}

.define-kf-menu() {
  .kf-menu {
    .kf-menu-color(@light);
    .kf-menu-size(@vpad-md, @hpad-md, @fs-md, @br-md);
  }
  @sizeLen: length(@sizes);
  .size(@i: 1) when (@i <= @sizeLen) {
    @s: extract(@sizes, @i);
    @vpad: extract(@vpads, @i);
    @hpad: extract(@hpads, @i);
    @fs: extract(@fss, @i);
    @br: extract(@brs, @i);
    .kf-menu.kf-@{s} {
      .kf-menu-size(@@vpad, @@hpad, @@fs, @@br);
    }

    .size(@i + 1);
  }

  @colorLen: length(@colors);
  .color(@i: 1) when (@i <= @colorLen) {
    @c: extract(@colors, @i);
    .kf-menu.kf-@{c} {
      .kf-menu-color(@@c);
    }

    .color(@i + 1);
  }

  .size();
  .color();
}

:global {
  .define-kf-menu();
}
